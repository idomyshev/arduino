#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API-only —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from enhanced_calibrate import EnhancedMotorCalibrator
from classes.calibrated_robot_arm import CalibratedRobotArm

async def final_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("üéØ Final API-Only System Test")
    print("=" * 50)
    
    robot_id = "esp32_robot_arm_001"
    server_url = "http://localhost:8000/api"
    
    # 1. –¢–µ—Å—Ç –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä–∞
    print("\n1. Testing EnhancedMotorCalibrator...")
    calibrator = EnhancedMotorCalibrator(robot_id=robot_id, server_url=server_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_available = await calibrator.test_api_connection()
    if not api_available:
        print("‚ùå API server is not available!")
        return False
    
    print("‚úÖ API connection successful")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    calibration_loaded = await calibrator.load_calibration_data()
    if calibration_loaded:
        print("‚úÖ Calibration data loaded from API")
        print(f"   Calibrated motors: {list(calibrator.calibration_data.keys())}")
    else:
        print("‚ÑπÔ∏è  No calibration data found")
    
    # 2. –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–æ–±–æ—Ç–∞
    print("\n2. Testing CalibratedRobotArm...")
    robot_arm = CalibratedRobotArm(robot_id=robot_id, server_url=server_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    calibration_loaded = await robot_arm.load_calibration_data()
    if calibration_loaded:
        print("‚úÖ Calibration data loaded from API")
        print(f"   Calibrated motors: {list(robot_arm.calibration_data.keys())}")
    else:
        print("‚ÑπÔ∏è  No calibration data found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    position_loaded = await robot_arm.load_calibration_start_position()
    if position_loaded:
        print("‚úÖ Calibration start position loaded from API")
        robot_arm.show_start_position_status()
    else:
        print("‚ÑπÔ∏è  No calibration start position found")
        robot_arm.show_start_position_status()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    print("\n3. Checking server status...")
    try:
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{server_url}/status") as response:
                if response.status == 200:
                    status = await response.json()
                    print("‚úÖ Server is running")
                    print(f"   Database: {status['database']}")
                else:
                    print(f"‚ùå Server error: {response.status}")
    except Exception as e:
        print(f"‚ùå Error checking server: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
    print("\n4. Checking API data...")
    try:
        import aiohttp
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            async with session.get(f"{server_url}/calibration/{robot_id}") as response:
                if response.status == 200:
                    print("‚úÖ Calibration data available in API")
                elif response.status == 404:
                    print("‚ÑπÔ∏è  No calibration data in API")
                else:
                    print(f"‚ùå Calibration API error: {response.status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            async with session.get(f"{server_url}/position/{robot_id}") as response:
                if response.status == 200:
                    print("‚úÖ Position data available in API")
                elif response.status == 404:
                    print("‚ÑπÔ∏è  No position data in API")
                else:
                    print(f"‚ùå Position API error: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå Error checking API data: {e}")
    
    print("\nüéâ Final Test Complete!")
    print("=" * 50)
    print("‚úÖ API-only system working")
    print("‚úÖ No file dependencies")
    print("‚úÖ Centralized data storage")
    print("‚úÖ All components integrated")
    
    return True

if __name__ == "__main__":
    asyncio.run(final_test())
