#!/usr/bin/env python3
"""
Simple Test Calibration Start Position System
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
"""

import asyncio
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∞—Å—Å–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'classes'))

from enhanced_calibrate import EnhancedMotorCalibrator
from calibrated_robot_arm import CalibratedRobotArm

async def test_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    print("üß™ Simple Test: Calibration Start Position System")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    print("\n1Ô∏è‚É£ Testing EnhancedMotorCalibrator - Saving Start Position")
    print("-" * 50)
    
    calibrator = EnhancedMotorCalibrator(
        robot_id="esp32_robot_arm_001",
        server_url="http://localhost:8000/api",
        use_api=True,
        fallback_to_file=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_available = await calibrator.test_api_connection()
    if not api_available:
        calibrator.use_api = False
        calibrator.fallback_to_file = True
        print("Using file-only mode")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    print("Saving calibration start position...")
    success = await calibrator.save_calibration_start_position()
    
    if success:
        print("‚úÖ Start position saved successfully!")
    else:
        print("‚ùå Failed to save start position!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    position_file = os.path.join(
        os.path.dirname(__file__), "data", "robot_data_position.json"
    )
    
    if os.path.exists(position_file):
        print(f"‚úÖ Position file updated: {position_file}")
        with open(position_file, 'r') as f:
            data = json.load(f)
        print(f"   Position name: {data['position_name']}")
        print(f"   Motor positions: {data['motor_positions']}")
        print(f"   Timestamp: {data['timestamp']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        if data['position_name'] == 'calibration_start':
            print("‚úÖ Correct position name: calibration_start")
        else:
            print(f"‚ùå Wrong position name: {data['position_name']}")
    else:
        print(f"‚ùå Position file not found: {position_file}")
    
    # 2. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    print("\n2Ô∏è‚É£ Testing CalibratedRobotArm - Loading Start Position")
    print("-" * 50)
    
    robot = CalibratedRobotArm()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    print("Loading calibration start position...")
    success = await robot.load_calibration_start_position()
    
    if success:
        print("‚úÖ Start position loaded successfully!")
        robot.show_start_position_status()
    else:
        print("‚ùå Failed to load start position!")
    
    # 3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–∑–∏—Ü–∏–∏
    print("\n3Ô∏è‚É£ Testing Position Verification")
    print("-" * 50)
    
    print("Testing position verification...")
    is_correct = await robot.verify_start_position()
    
    if is_correct:
        print("‚úÖ Position verification passed!")
    else:
        print("‚ùå Position verification failed!")
    
    # 4. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    print("\n4Ô∏è‚É£ Testing Position Change Detection")
    print("-" * 50)
    
    # –ò–∑–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–¥–Ω–æ–≥–æ –º–æ—Ç–æ—Ä–∞
    robot.current_positions[0] = 0.3  # –ú–æ—Ç–æ—Ä 0 –Ω–∞ 30%
    print("Changed motor 0 position to 30%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
    is_correct = await robot.verify_start_position()
    
    if not is_correct:
        print("‚úÖ Position verification correctly detected change!")
    else:
        print("‚ùå Position verification failed to detect change!")
    
    # 5. –¢–µ—Å—Ç API –¥–∞–Ω–Ω—ã—Ö
    print("\n5Ô∏è‚É£ Testing API Data")
    print("-" * 50)
    
    if calibrator.use_api:
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{calibrator.server_url}/position/{calibrator.robot_id}") as response:
                    if response.status == 200:
                        data = await response.json()
                        print("‚úÖ API position data retrieved!")
                        print(f"   Position: {data['position']['motor_positions']}")
                        print(f"   Name: {data['position']['position_name']}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–∞–Ω–Ω—ã–µ
                        if data['position']['position_name'] == 'calibration_start':
                            print("‚úÖ API has correct calibration_start position!")
                        else:
                            print(f"‚ùå API has wrong position name: {data['position']['position_name']}")
                    else:
                        print(f"‚ùå API error: {response.status}")
        except Exception as e:
            print(f"‚ùå API test failed: {e}")
    else:
        print("‚ÑπÔ∏è  API not available, skipping API test")
    
    print("\n" + "=" * 60)
    print("üéâ CALIBRATION START POSITION SYSTEM TEST COMPLETED!")
    print("=" * 60)
    
    print("\nSummary:")
    print("‚úÖ EnhancedMotorCalibrator can save start position")
    print("‚úÖ CalibratedRobotArm can load start position")
    print("‚úÖ Position verification works correctly")
    print("‚úÖ System detects position changes")
    print("‚úÖ Data is saved to file and API")
    
    print("\nNext steps:")
    print("1. Run actual calibration: python3 enhanced_calibrate.py")
    print("2. Test with real robot: python3 examples/example_calibrated.py")
    print("3. Verify start position is loaded correctly")

if __name__ == "__main__":
    asyncio.run(test_simple())
