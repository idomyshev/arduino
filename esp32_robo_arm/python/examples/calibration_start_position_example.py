#!/usr/bin/env python3
"""
Example: Calibration Start Position System
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∞—Å—Å–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'classes'))

from enhanced_calibrate import EnhancedMotorCalibrator
from calibrated_robot_arm import CalibratedRobotArm

async def example_calibration_workflow():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º"""
    
    print("ü§ñ ESP32 Robot Arm - Complete Calibration Workflow")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤
    print("\n1Ô∏è‚É£ STEP 1: Motor Calibration")
    print("-" * 30)
    
    calibrator = EnhancedMotorCalibrator(
        robot_id="esp32_robot_arm_001",
        server_url="http://localhost:8000/api",
        use_api=True,
        fallback_to_file=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_available = await calibrator.test_api_connection()
    if not api_available:
        calibrator.use_api = False
        calibrator.fallback_to_file = True
        print("Using file-only mode")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ–±–æ—Ç—É
    print("Connecting to robot...")
    if await calibrator.connect():
        print("‚úÖ Connected to robot!")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        await calibrator.load_calibration_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        calibrator.show_calibration_status()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏)
        print("\nSaving calibration start position...")
        await calibrator.save_calibration_start_position()
        
        await calibrator.disconnect()
        print("‚úÖ Calibration workflow completed!")
    else:
        print("‚ùå Failed to connect to robot!")
        return
    
    # –®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ–±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
    print("\n2Ô∏è‚É£ STEP 2: Using Robot with Start Position")
    print("-" * 40)
    
    robot = CalibratedRobotArm()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ–±–æ—Ç—É
    print("Connecting to robot...")
    if await robot.connect():
        print("‚úÖ Connected to robot!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        robot.show_start_position_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–±–æ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        print("\nVerifying start position...")
        is_correct = await robot.verify_start_position()
        
        if is_correct:
            print("‚úÖ Robot is in correct start position!")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏–π
            print("\n3Ô∏è‚É£ STEP 3: Demonstration Movements")
            print("-" * 35)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            robot.show_available_positions()
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏—é "pick"
            print("\nMoving to PICK position...")
            await robot.move_to_position("pick")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            robot.show_current_positions()
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏—é "home"
            print("\nMoving to HOME position...")
            await robot.move_to_position("home")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            robot.show_current_positions()
            
        else:
            print("‚ö†Ô∏è  Robot is not in correct start position!")
            print("Consider recalibrating or manually moving to start position")
        
        await robot.disconnect()
        print("‚úÖ Robot usage completed!")
    else:
        print("‚ùå Failed to connect to robot!")
    
    print("\n" + "=" * 60)
    print("üéâ COMPLETE WORKFLOW DEMONSTRATION FINISHED!")
    print("=" * 60)
    
    print("\nKey Benefits Demonstrated:")
    print("‚úÖ Automatic start position saving after calibration")
    print("‚úÖ Automatic start position loading on robot startup")
    print("‚úÖ Position verification and validation")
    print("‚úÖ Accurate movement calculations from known position")
    print("‚úÖ Data persistence in file and API")
    print("‚úÖ Seamless integration with existing code")

async def example_position_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    
    print("\nüéØ Position Management Examples")
    print("=" * 40)
    
    robot = CalibratedRobotArm()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ–±–æ—Ç—É
    if await robot.connect():
        print("‚úÖ Connected to robot!")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        await robot.load_calibration_start_position()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        robot.show_start_position_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        is_correct = await robot.verify_start_position()
        
        if is_correct:
            print("‚úÖ Robot is in correct start position!")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
            print("\nDemonstrating various movements...")
            
            # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0
            print("\nSmooth movement of motor 0...")
            await robot.smooth_move(0, 0.0, 0.5, steps=5, step_delay=0.3)
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            print("\nMoving to REST position...")
            await robot.move_to_position("rest")
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            print("\nReturning to start position...")
            await robot.move_to_position("home")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            print("\nFinal position verification...")
            await robot.verify_start_position()
            
        else:
            print("‚ö†Ô∏è  Robot position needs correction!")
        
        await robot.disconnect()
        print("‚úÖ Position management demo completed!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("Choose demo:")
    print("1. Complete calibration workflow")
    print("2. Position management examples")
    print("3. Both demos")
    
    choice = input("Choose option (1-3): ").strip()
    
    if choice == "1":
        await example_calibration_workflow()
    elif choice == "2":
        await example_position_management()
    elif choice == "3":
        await example_calibration_workflow()
        await example_position_management()
    else:
        print("Invalid choice!")

if __name__ == "__main__":
    asyncio.run(main())
