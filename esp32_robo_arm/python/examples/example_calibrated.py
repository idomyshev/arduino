#!/usr/bin/env python3
"""
Example: Using Calibrated Robot Arm
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–æ–±–æ-—Ä—É–∫–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from classes.calibrated_robot_arm import CalibratedRobotArm

async def demo_calibrated_movements():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π"""
    print("=" * 60)
    print("CALIBRATED ROBOT ARM DEMO")
    print("=" * 60)
    
    robot = CalibratedRobotArm()
    
    try:
        if not await robot.connect():
            print("Failed to connect!")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        robot.show_calibration_status()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        robot.show_available_positions()
        
        print("\nStarting demo sequences...")
        
        # –î–µ–º–æ 1: –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
        print("\n1. Position transitions demo:")
        await robot.move_to_position("pick")
        await asyncio.sleep(2)

        await robot.move_to_position("home")
        await asyncio.sleep(2)
        
        await robot.move_to_position("pick")
        await asyncio.sleep(2)

        await robot.move_to_position("home")
        await asyncio.sleep(2)
        
        await robot.move_to_position("place")
        await asyncio.sleep(2)

        await robot.move_to_position("home")
        await asyncio.sleep(2)
        
        await robot.move_to_position("rest")
        await asyncio.sleep(2)
        
        # –î–µ–º–æ 2: –¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n2. Precise positioning demo:")
        await robot.move_to_percentage(0, 0.0)    # –ú–∏–Ω–∏–º—É–º
        await asyncio.sleep(1)
        await robot.move_to_percentage(0, 0.5)    # –°–µ—Ä–µ–¥–∏–Ω–∞
        await asyncio.sleep(1)
        await robot.move_to_percentage(0, 1.0)    # –ú–∞–∫—Å–∏–º—É–º
        await asyncio.sleep(1)
        await robot.move_to_percentage(0, 0.25)   # 25%
        await asyncio.sleep(1)
        
        # –î–µ–º–æ 3: –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        print("\n3. Smooth movement demo:")
        await robot.smooth_move(0, 0.0, 1.0, steps=20, step_delay=0.1)
        await robot.smooth_move(0, 1.0, 0.0, steps=20, step_delay=0.1)
        
        # –î–µ–º–æ 4: –ì–æ—Ç–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n4. Pick and place sequence:")
        await robot.pick_and_place_sequence()
        
        print("\n5. Wave sequence:")
        await robot.wave_sequence()
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        await robot.move_to_position("home")
        
        print("\nDemo completed successfully!")
        return True
        
    except Exception as e:
        print(f"Demo failed: {e}")
        return False
    finally:
        await robot.disconnect()

async def interactive_calibrated_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏"""
    print("=" * 60)
    print("INTERACTIVE CALIBRATED ROBOT ARM")
    print("=" * 60)
    
    robot = CalibratedRobotArm()
    
    try:
        if not await robot.connect():
            return False
        
        robot.show_calibration_status()
        
        print("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  set <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>      - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–æ—Ä –≤ –ø–æ–∑–∏—Ü–∏—é (0-100%)")
        print("  move <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>     - –¢–æ –∂–µ —á—Ç–æ set")
        print("  position <name>            - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é")
        print("  smooth <–º–æ—Ç–æ—Ä> <start> <end> - –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏")
        print("  pickplace                  - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '–≤–∑—è—Ç—å-–ø–æ–ª–æ–∂–∏—Ç—å'")
        print("  wave                       - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å '–º–∞—Ö–∞–Ω–∏–µ'")
        print("  status                     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
        print("  positions                  - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        print("  quit                       - –í—ã—Ö–æ–¥")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã:")
        print("  set 0 50                   - –ú–æ—Ç–æ—Ä 0 –≤ –ø–æ–∑–∏—Ü–∏—é 50%")
        print("  move 1 25                  - –ú–æ—Ç–æ—Ä 1 –≤ –ø–æ–∑–∏—Ü–∏—é 25%")
        print("  position home              - –í—Å–µ –º–æ—Ç–æ—Ä—ã –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é")
        
        while True:
            try:
                command = input("\nCalibrated> ").strip().lower()
                
                if command == "quit":
                    break
                elif command == "status":
                    robot.show_calibration_status()
                elif command == "positions":
                    robot.show_available_positions()
                elif command == "pickplace":
                    await robot.pick_and_place_sequence()
                elif command == "wave":
                    await robot.wave_sequence()
                elif command.startswith("move ") or command.startswith("set "):
                    # –ö–æ–º–∞–Ω–¥–∞: move/set <motor> <percentage>
                    parts = command.split()
                    if len(parts) == 3:
                        try:
                            motor = int(parts[1])
                            percentage = float(parts[2])
                            
                            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ–ª—å—à–µ 1, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (0-100)
                            if percentage > 1:
                                percentage = percentage / 100.0
                            
                            await robot.move_to_percentage(motor, percentage)
                            print(f"‚úÖ –ú–æ—Ç–æ—Ä {motor} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é {percentage*100:.1f}%")
                        except ValueError:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: move <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>")
                            print("   –ü—Ä–∏–º–µ—Ä: move 0 50")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: move <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>")
                        print("   –ü—Ä–∏–º–µ—Ä: move 0 50")
                elif command.startswith("position "):
                    # –ö–æ–º–∞–Ω–¥–∞: position <name>
                    parts = command.split()
                    if len(parts) == 2:
                        position_name = parts[1]
                        await robot.move_to_position(position_name)
                    else:
                        print("Usage: position <name>")
                elif command.startswith("smooth "):
                    # –ö–æ–º–∞–Ω–¥–∞: smooth <motor> <start> <end>
                    parts = command.split()
                    if len(parts) == 4:
                        try:
                            motor = int(parts[1])
                            start = float(parts[2])
                            end = float(parts[3])
                            await robot.smooth_move(motor, start, end)
                        except ValueError:
                            print("Usage: smooth <motor> <start> <end>")
                    else:
                        print("Usage: smooth <motor> <start> <end>")
                else:
                    print("Unknown command")
                    
            except KeyboardInterrupt:
                print("\nInterrupted by user")
                break
            except Exception as e:
                print(f"Error: {e}")
        
        return True
        
    except Exception as e:
        print(f"Interactive mode failed: {e}")
        return False
    finally:
        await robot.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "interactive":
        await interactive_calibrated_mode()
    else:
        await demo_calibrated_movements()

if __name__ == "__main__":
    asyncio.run(main())
