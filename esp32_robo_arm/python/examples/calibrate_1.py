#!/usr/bin/env python3
"""
Calibrate 1: Demo Sequence for CalibratedRobotArm
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 10 –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–ª–∞—Å—Å–∞ CalibratedRobotArm
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from classes.calibrated_robot_arm import CalibratedRobotArm

class Calibrate1Demo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è CalibratedRobotArm"""
    
    def __init__(self):
        self.robot = CalibratedRobotArm()
        self.command_delay = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("=" * 70)
        print("ü§ñ CALIBRATE 1: –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨")
        print("=" * 70)
        print("üìã –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 10 –∫–æ–º–∞–Ω–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 10 —Å–µ–∫—É–Ω–¥")
        print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ CalibratedRobotArm")
        print("=" * 70)
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32
            print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32...")
            if not await self.robot.connect():
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ESP32 –≤–∫–ª—é—á–µ–Ω –∏ –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç—É–ø–∞.")
                return False
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            print("\nüìä –°—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–æ—Ç–æ—Ä–æ–≤:")
            self.robot.show_calibration_status()
            
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
            commands = [
                {
                    "name": "–î–æ–º–∞—à–Ω—è—è –ø–æ–∑–∏—Ü–∏—è",
                    "description": "–ü–µ—Ä–µ—Ö–æ–¥ –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏—é 0% (–¥–æ–º–∞—à–Ω—è—è –ø–æ–∑–∏—Ü–∏—è)",
                    "action": lambda: self.robot.move_to_position("home")
                },
                {
                    "name": "–î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –≤ 50%",
                    "description": "–¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
                    "action": lambda: self.robot.move_to_percentage(0, 0.5)
                },
                {
                    "name": "–î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1 –≤ 75%",
                    "description": "–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1 –≤ 75% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
                    "action": lambda: self.robot.move_to_percentage(1, 0.75)
                },
                {
                    "name": "–î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 2 –≤ 25%",
                    "description": "–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 2 –≤ 25% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
                    "action": lambda: self.robot.move_to_percentage(2, 0.25)
                },
                {
                    "name": "–ü–æ–∑–∏—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞",
                    "description": "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é 'pick' (30%, 70%, 50%)",
                    "action": lambda: self.robot.move_to_position("pick")
                },
                {
                    "name": "–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0",
                    "description": "–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ 100% (10 —à–∞–≥–æ–≤)",
                    "action": lambda: self.robot.smooth_move(0, self.robot.get_current_position(0), 1.0, 10)
                },
                {
                    "name": "–ü–æ–∑–∏—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    "description": "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é 'place' (80%, 40%, 20%)",
                    "action": lambda: self.robot.move_to_position("place")
                },
                {
                    "name": "–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1",
                    "description": "–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1 –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ 0% (15 —à–∞–≥–æ–≤)",
                    "action": lambda: self.robot.smooth_move(1, self.robot.get_current_position(1), 0.0, 15)
                },
                {
                    "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ç—è–Ω—É—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è",
                    "description": "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é 'extended' (100%, 100%, 100%)",
                    "action": lambda: self.robot.move_to_position("extended")
                },
                {
                    "name": "–í–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é",
                    "description": "–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é 'home' (0%, 0%, 0%)",
                    "action": lambda: self.robot.move_to_position("home")
                }
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            for i, command in enumerate(commands, 1):
                print(f"\n{'='*70}")
                print(f"üéØ –ö–û–ú–ê–ù–î–ê {i}/10: {command['name']}")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {command['description']}")
                print(f"‚è±Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.command_delay} —Å–µ–∫—É–Ω–¥...")
                print(f"{'='*70}")
                
                # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
                for countdown in range(self.command_delay, 0, -1):
                    print(f"‚è∞ {countdown}...", end="\r")
                    await asyncio.sleep(1)
                
                print(f"\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {command['name']}")
                
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    await command['action']()
                    print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    print("\nüìä –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤:")
                    self.robot.show_current_positions()
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {i}: {e}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                if i < len(commands):
                    print(f"\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π...")
                    await asyncio.sleep(3)
            
            print(f"\n{'='*70}")
            print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("‚úÖ –í—Å–µ 10 –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print("ü§ñ –†–æ–±–æ-—Ä—É–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é")
            print(f"{'='*70}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        
        finally:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            if self.robot.connected:
                print("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ESP32...")
                await self.robot.disconnect()
                print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    async def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã"""
        print("=" * 70)
        print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú CALIBRATE 1")
        print("=" * 70)
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        
        commands = [
            ("1", "–î–æ–º–∞—à–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", "home"),
            ("2", "–î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –≤ 50%", "move_0_50"),
            ("3", "–î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1 –≤ 75%", "move_1_75"),
            ("4", "–î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 2 –≤ 25%", "move_2_25"),
            ("5", "–ü–æ–∑–∏—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞", "pick"),
            ("6", "–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0", "smooth_0"),
            ("7", "–ü–æ–∑–∏—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "place"),
            ("8", "–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1", "smooth_1"),
            ("9", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ç—è–Ω—É—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è", "extended"),
            ("10", "–í–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é", "home"),
            ("all", "–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "all"),
            ("status", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏", "status"),
            ("positions", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏", "positions"),
            ("exit", "–í—ã—Ö–æ–¥", "exit")
        ]
        
        for cmd_id, name, _ in commands:
            print(f"  {cmd_id:4} - {name}")
        
        print("=" * 70)
        
        try:
            if not await self.robot.connect():
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
                return False
            
            while True:
                try:
                    choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip().lower()
                    
                    if choice == "exit":
                        break
                    elif choice == "all":
                        await self.run_demo()
                        break
                    elif choice == "status":
                        self.robot.show_calibration_status()
                    elif choice == "positions":
                        self.robot.show_current_positions()
                    elif choice == "1" or choice == "home":
                        await self.robot.move_to_position("home")
                        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é")
                    elif choice == "2" or choice == "move_0_50":
                        await self.robot.move_to_percentage(0, 0.5)
                        print("‚úÖ –ú–æ—Ç–æ—Ä 0 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é 50%")
                    elif choice == "3" or choice == "move_1_75":
                        await self.robot.move_to_percentage(1, 0.75)
                        print("‚úÖ –ú–æ—Ç–æ—Ä 1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é 75%")
                    elif choice == "4" or choice == "move_2_25":
                        await self.robot.move_to_percentage(2, 0.25)
                        print("‚úÖ –ú–æ—Ç–æ—Ä 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é 25%")
                    elif choice == "5" or choice == "pick":
                        await self.robot.move_to_position("pick")
                        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é –∑–∞—Ö–≤–∞—Ç–∞")
                    elif choice == "6" or choice == "smooth_0":
                        current_pos = self.robot.get_current_position(0)
                        await self.robot.smooth_move(0, current_pos, 1.0, 10)
                        print("‚úÖ –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –¥–æ 100%")
                    elif choice == "7" or choice == "place":
                        await self.robot.move_to_position("place")
                        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    elif choice == "8" or choice == "smooth_1":
                        current_pos = self.robot.get_current_position(1)
                        await self.robot.smooth_move(1, current_pos, 0.0, 15)
                        print("‚úÖ –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 1 –¥–æ 0%")
                    elif choice == "9" or choice == "extended":
                        await self.robot.move_to_position("extended")
                        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—É—é –ø–æ–∑–∏—Ü–∏—é")
                    elif choice == "10":
                        await self.robot.move_to_position("home")
                        print("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é")
                    else:
                        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
                    print("\nüìä –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
                    self.robot.show_current_positions()
                    
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except EOFError:
            print("\n\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        finally:
            if self.robot.connected:
                await self.robot.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = Calibrate1Demo()
    
    print("ü§ñ CALIBRATE 1: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CalibratedRobotArm")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è (10 –∫–æ–º–∞–Ω–¥)")
    print("2 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("=" * 50)
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            await demo.run_demo()
        elif choice == "2":
            await demo.run_interactive_mode()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
            await demo.run_demo()
            
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except EOFError:
        print("\n\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

if __name__ == "__main__":
    asyncio.run(main())
