#!/usr/bin/env python3
"""
Interactive Calibrated Robot Arm Controller
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ-—Ä—É–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ CalibratedRobotArm
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from classes.calibrated_robot_arm import CalibratedRobotArm

class InteractiveCalibratedRobotArm:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ-—Ä—É–∫–∏ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π"""
    
    def __init__(self):
        self.robot = CalibratedRobotArm()
        self.running = False
    
    def print_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        print(f"\n{'='*60}")
        print("ü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–† –†–û–ë–û-–†–£–ö–ò")
        print(f"{'='*60}")
        print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        print()
        print("üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("  connect     - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ESP32")
        print("  disconnect  - –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç ESP32")
        print()
        print("üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–¢–û–†–ê–ú–ò:")
        print("  move <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>  - –î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏—é (0-100%)")
        print("  set <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>  - –¢–æ –∂–µ —á—Ç–æ move")
        print("  stop <–º–æ—Ç–æ—Ä>           - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–æ—Ä")
        print("  stopall                - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ—Ç–æ—Ä—ã")
        print()
        print("üìç –ü–†–ï–î–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
        print("  home       - –î–æ–º–∞—à–Ω—è—è –ø–æ–∑–∏—Ü–∏—è (0%, 0%, 0%)")
        print("  pick       - –ü–æ–∑–∏—Ü–∏—è –∑–∞—Ö–≤–∞—Ç–∞ (30%, 70%, 50%)")
        print("  place      - –ü–æ–∑–∏—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (80%, 40%, 20%)")
        print("  rest       - –ü–æ–∑–∏—Ü–∏—è –æ—Ç–¥—ã—Ö–∞ (10%, 10%, 10%)")
        print("  extended   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Ç—è–Ω—É—Ç–∞—è (100%, 100%, 100%)")
        print("  retracted  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—Ç—è–Ω—É—Ç–∞—è (0%, 0%, 0%)")
        print()
        print("üîÑ –ü–õ–ê–í–ù–´–ï –î–í–ò–ñ–ï–ù–ò–Ø:")
        print("  smooth <–º–æ—Ç–æ—Ä> <–æ—Ç> <–¥–æ> [—à–∞–≥–∏] - –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏")
        print()
        print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("  pickplace   - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –≤–∑—è—Ç—å ‚Üí –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å ‚Üí –ø–æ–ª–æ–∂–∏—Ç—å")
        print("  wave        - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –º–∞—Ö–∞–Ω–∏–µ —Ä—É–∫–æ–π")
        print()
        print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print("  status      - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
        print("  positions   - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤")
        print("  available   - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        print("  reset       - –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        print()
        print("‚ùì –°–ü–†–ê–í–ö–ê:")
        print("  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("  exit        - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print()
        print("üí° –ü–†–ò–ú–ï–†–´:")
        print("  move 0 50     - –î–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –≤ –ø–æ–∑–∏—Ü–∏—é 50%")
        print("  set 1 100      - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞ 1 –≤ –ø–æ–∑–∏—Ü–∏—é 100%")
        print("  smooth 0 0 100 - –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ 0 –æ—Ç 0% –¥–æ 100%")
        print("  pickplace      - –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"{'='*60}")
    
    async def handle_command(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parts = command.strip().lower().split()
        if not parts:
            return
        
        cmd = parts[0]
        
        try:
            if cmd == "help":
                self.print_help()
            
            elif cmd == "connect":
                if await self.robot.connect():
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    self.robot.show_calibration_status()
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
            
            elif cmd == "disconnect":
                await self.robot.disconnect()
                print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            
            elif cmd in ["move", "set"]:
                if len(parts) != 3:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: move <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>")
                    print("   –ü—Ä–∏–º–µ—Ä: move 0 50")
                    return
                
                motor = int(parts[1])
                position = float(parts[2])
                
                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–æ–ª—å—à–µ 1, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (0-100)
                if position > 1:
                    position = position / 100.0
                
                if position < 0 or position > 1:
                    print("‚ùå –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%")
                    return
                
                await self.robot.move_to_percentage(motor, position)
                print(f"‚úÖ –ú–æ—Ç–æ—Ä {motor} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é {position*100:.1f}%")
            
            elif cmd == "stop":
                if len(parts) != 2:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: stop <–º–æ—Ç–æ—Ä>")
                    return
                
                motor = int(parts[1])
                await self.robot.controller.send_command(motor, "forward", 0)
                print(f"‚úÖ –ú–æ—Ç–æ—Ä {motor} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            elif cmd == "stopall":
                await self.robot.controller.stop_all_motors()
                print("‚úÖ –í—Å–µ –º–æ—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            elif cmd in ["home", "pick", "place", "rest", "extended", "retracted"]:
                await self.robot.move_to_position(cmd)
                print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é '{cmd}' –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            elif cmd == "smooth":
                if len(parts) < 4:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: smooth <–º–æ—Ç–æ—Ä> <–æ—Ç> <–¥–æ> [—à–∞–≥–∏]")
                    return
                
                motor = int(parts[1])
                start_pos = float(parts[2])
                end_pos = float(parts[3])
                steps = int(parts[4]) if len(parts) > 4 else 10
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ
                if start_pos > 1:
                    start_pos = start_pos / 100.0
                if end_pos > 1:
                    end_pos = end_pos / 100.0
                
                await self.robot.smooth_move(motor, start_pos, end_pos, steps)
                print(f"‚úÖ –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ {motor} –æ—Ç {start_pos*100:.1f}% –¥–æ {end_pos*100:.1f}%")
            
            elif cmd == "pickplace":
                await self.robot.pick_and_place_sequence()
                print("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 'pick and place' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            elif cmd == "wave":
                await self.robot.wave_sequence()
                print("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 'wave' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            elif cmd == "status":
                self.robot.show_calibration_status()
            
            elif cmd == "positions":
                self.robot.show_current_positions()
            
            elif cmd == "available":
                self.robot.show_available_positions()
            
            elif cmd == "reset":
                self.robot.reset_positions()
                print("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å–±—Ä–æ—à–µ–Ω–æ")
            
            elif cmd == "exit":
                self.running = False
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
                print("   –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        print("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ-—Ä—É–∫–∏ –∑–∞–ø—É—â–µ–Ω!")
        print("   –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        print("   –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        self.running = True
        
        while self.running:
            try:
                command = input("\nü§ñ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
                if command:
                    await self.handle_command(command)
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except EOFError:
                print("\n\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                break
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if self.robot.connected:
            await self.robot.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    controller = InteractiveCalibratedRobotArm()
    await controller.run()

if __name__ == "__main__":
    asyncio.run(main())
