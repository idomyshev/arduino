#!/usr/bin/env python3
"""
Simplified Interactive Robot Arm Control
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–±–æ-—Ä—É–∫–æ–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from classes.calibrated_robot_arm import CalibratedRobotArm

class InteractiveRobotArm:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ-—Ä—É–∫–∏"""
    
    def __init__(self):
        self.robot = CalibratedRobotArm()
        self.connected = False
        self.current_positions = {0: 0.0, 1: 0.0, 2: 0.0}  # –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32"""
        if await self.robot.connect():
            self.connected = True
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ESP32 Robot Arm")
            self.robot.show_calibration_status()
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ESP32")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ESP32"""
        if self.connected:
            await self.robot.disconnect()
            self.connected = False
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç ESP32")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        print("\n" + "="*60)
        print("ü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–ë–û-–†–£–ö–û–ô")
        print("="*60)
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  set <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–æ—Ä –≤ –ø–æ–∑–∏—Ü–∏—é (0-100%)")
        print("  move <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>    - –¢–æ –∂–µ —á—Ç–æ set")
        print("  home                      - –í—Å–µ –º–æ—Ç–æ—Ä—ã –≤ –¥–æ–º–∞—à–Ω—é—é –ø–æ–∑–∏—Ü–∏—é (0%)")
        print("  pick                      - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é –∑–∞—Ö–≤–∞—Ç–∞")
        print("  place                     - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print("  rest                      - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é –ø–æ–∫–æ—è")
        print("  status                    - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤")
        print("  calibrate                 - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
        print("  positions                 - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        print("  reset                     - –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        print("  help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("  quit                      - –í—ã—Ö–æ–¥")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã:")
        print("  set 0 50                  - –ú–æ—Ç–æ—Ä 0 –≤ –ø–æ–∑–∏—Ü–∏—é 50%")
        print("  move 1 25                 - –ú–æ—Ç–æ—Ä 1 –≤ –ø–æ–∑–∏—Ü–∏—é 25%")
        print("  set 2 100                 - –ú–æ—Ç–æ—Ä 2 –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é")
        print("  home                      - –í—Å–µ –º–æ—Ç–æ—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏—é 0%")
        print("\nüéØ –ú–æ—Ç–æ—Ä—ã: 0, 1, 2")
        print("üìä –ü–æ–∑–∏—Ü–∏–∏: 0% (–º–∏–Ω–∏–º—É–º) - 100% (–º–∞–∫—Å–∏–º—É–º)")
        print("="*60)
    
    def reset_positions(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —Å–±–∏–ª–∏—Å—å)"""
        self.current_positions = {0: 0.0, 1: 0.0, 2: 0.0}
        print("üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å–±—Ä–æ—à–µ–Ω–æ. –í—Å–µ –º–æ—Ç–æ—Ä—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ 0%")
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ –º–æ—Ç–æ—Ä—ã –Ω–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ 0%, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'home' –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤"""
        print("\nüìä –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–æ—Ç–æ—Ä–æ–≤:")
        for motor, position in self.current_positions.items():
            print(f"  –ú–æ—Ç–æ—Ä {motor}: {position*100:.1f}%")
        print()
    
    async def set_motor_position(self, motor: int, target_percentage: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–æ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        
        Args:
            motor: –Ω–æ–º–µ—Ä –º–æ—Ç–æ—Ä–∞ (0, 1, 2)
            target_percentage: —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (0-100)
        """
        if not self.connected:
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É!")
            return False
        
        if motor < 0 or motor > 2:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ—Ç–æ—Ä–∞: {motor}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0, 1 –∏–ª–∏ 2")
            return False
        
        if target_percentage < 0 or target_percentage > 100:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {target_percentage}%. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0-100")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ (0-1)
        target_position = target_percentage / 100.0
        current_pos = self.current_positions[motor]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        position_tolerance = 0.02  # 2% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
        if abs(target_position - current_pos) <= position_tolerance:
            print(f"‚úÖ –ú–æ—Ç–æ—Ä {motor} —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ {target_percentage:.1f}% (—Ç–µ–∫—É—â–∞—è: {current_pos*100:.1f}%)")
            return True
        
        try:
            print(f"üéØ –ú–æ—Ç–æ—Ä {motor}: {current_pos*100:.1f}% ‚Üí {target_percentage:.1f}%")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
            if target_position > current_pos:
                direction = "‚Üí"  # –í–ø–µ—Ä–µ–¥ (–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
            elif target_position < current_pos:
                direction = "‚Üê"  # –ù–∞–∑–∞–¥ (–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
            else:
                direction = "="  # –£–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏
            
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            await self.robot.move_to_percentage(motor, target_position)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            self.current_positions[motor] = target_position
            
            print(f"‚úÖ –ú–æ—Ç–æ—Ä {motor} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é {target_percentage:.1f}%")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º–æ—Ç–æ—Ä–∞ {motor}: {e}")
            return False
    
    async def move_to_preset_position(self, position_name: str):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
        if not self.connected:
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É!")
            return False
        
        try:
            print(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é: {position_name}")
            await self.robot.move_to_position(position_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            if position_name == "home":
                self.current_positions = {0: 0.0, 1: 0.0, 2: 0.0}
            elif position_name == "pick":
                self.current_positions = {0: 0.3, 1: 0.7, 2: 0.5}
            elif position_name == "place":
                self.current_positions = {0: 0.8, 1: 0.4, 2: 0.2}
            elif position_name == "rest":
                self.current_positions = {0: 0.1, 1: 0.1, 2: 0.1}
            elif position_name == "extended":
                self.current_positions = {0: 1.0, 1: 1.0, 2: 1.0}
            elif position_name == "retracted":
                self.current_positions = {0: 0.0, 1: 0.0, 2: 0.0}
            
            print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é '{position_name}' –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é '{position_name}': {e}")
            return False
    
    async def interactive_mode(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ-—Ä—É–∫–æ–π...")
        
        if not await self.connect():
            return False
        
        self.show_help()
        
        try:
            while True:
                try:
                    command = input("\nü§ñ –†–æ–±–æ—Ç> ").strip()
                    
                    if not command:
                        continue
                    
                    parts = command.lower().split()
                    cmd = parts[0]
                    
                    if cmd == "quit" or cmd == "exit":
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    elif cmd == "help":
                        self.show_help()
                    
                    elif cmd == "status":
                        self.show_status()
                    
                    elif cmd == "calibrate":
                        self.robot.show_calibration_status()
                    
                    elif cmd == "positions":
                        self.robot.show_available_positions()
                    
                    elif cmd == "reset":
                        self.reset_positions()
                    
                    elif cmd in ["set", "move"]:
                        if len(parts) == 3:
                            try:
                                motor = int(parts[1])
                                position = float(parts[2])
                                await self.set_motor_position(motor, position)
                            except ValueError:
                                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: set <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>")
                                print("   –ü—Ä–∏–º–µ—Ä: set 0 50")
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: set <–º–æ—Ç–æ—Ä> <–ø–æ–∑–∏—Ü–∏—è>")
                            print("   –ü—Ä–∏–º–µ—Ä: set 0 50")
                    
                    elif cmd in ["home", "pick", "place", "rest", "extended", "retracted"]:
                        await self.move_to_preset_position(cmd)
                    
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
                        print("   –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                
                except KeyboardInterrupt:
                    print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            return False
        finally:
            await self.disconnect()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    controller = InteractiveRobotArm()
    await controller.interactive_mode()

if __name__ == "__main__":
    asyncio.run(main())
