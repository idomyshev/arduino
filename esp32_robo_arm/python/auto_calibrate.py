#!/usr/bin/env python3
"""
Auto Calibration Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∞—Å—Å–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'classes'))

from enhanced_calibrate import EnhancedMotorCalibrator

async def auto_calibration():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    
    print("ü§ñ ESP32 Robot Arm - Auto Calibration")
    print("=" * 50)
    
    calibrator = EnhancedMotorCalibrator(
        robot_id="esp32_robot_arm_001",
        server_url="http://localhost:8000/api",
        use_api=True,
        fallback_to_file=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    print("Checking API connection...")
    api_available = await calibrator.test_api_connection()
    
    if not api_available:
        calibrator.use_api = False
        calibrator.fallback_to_file = True
        print("Using file-only mode")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ–±–æ—Ç—É
    print("\nConnecting to robot...")
    if not await calibrator.connect():
        print("‚ùå Failed to connect to robot!")
        print("Make sure:")
        print("  - ESP32 is powered on")
        print("  - Bluetooth is enabled")
        print("  - Robot is in range")
        return False
    
    try:
        print("‚úÖ Connected to robot!")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        await calibrator.load_calibration_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        calibrator.show_calibration_status()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        print("\nCalibration options:")
        print("1. Calibrate all motors")
        print("2. Calibrate single motor")
        print("3. Recalibrate existing motor")
        
        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤
        choice = "1"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤
        speed = 150   # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        print(f"Auto-selected: Calibrate all motors at speed {speed}")
        
        if choice == "1":
            print("\nStarting calibration of all motors...")
            success = await calibrator.calibrate_all_motors(speed)
            
            if success:
                print("üéâ All motors calibrated successfully!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                print("\nSaving calibration data...")
                await calibrator.save_calibration_data()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                print("Saving calibration start position...")
                await calibrator.save_calibration_start_position()
                
                print("‚úÖ Calibration completed and saved successfully!")
            else:
                print("‚ùå Calibration failed!")
                return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("\nFinal calibration status:")
        calibrator.show_calibration_status()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Calibration error: {e}")
        return False
    finally:
        await calibrator.disconnect()
        print("Disconnected from robot")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("Starting automatic calibration...")
    print("This will calibrate all motors and save the start position.")
    print("Make sure the robot is ready!")
    
    success = await auto_calibration()
    
    if success:
        print("\nüéâ CALIBRATION COMPLETED SUCCESSFULLY!")
        print("=" * 50)
        print("Next steps:")
        print("1. Test the robot with: python3 examples/example_calibrated.py")
        print("2. Verify start position is loaded correctly")
        print("3. Try some movements to test accuracy")
    else:
        print("\n‚ùå CALIBRATION FAILED!")
        print("Check the error messages above and try again.")

if __name__ == "__main__":
    asyncio.run(main())
