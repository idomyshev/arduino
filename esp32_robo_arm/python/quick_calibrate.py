#!/usr/bin/env python3
"""
Quick Calibration Launcher
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å API
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∞—Å—Å–∞–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'classes'))

from enhanced_calibrate import EnhancedMotorCalibrator

async def quick_calibration():
    """–ë—ã—Å—Ç—Ä–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    
    print("üöÄ ESP32 Robot Arm - Quick Calibration")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    calibrator = EnhancedMotorCalibrator()
    
    print("Checking API server...")
    api_available = await calibrator.test_api_connection()
    
    if not api_available:
        print("\n‚ö†Ô∏è  API server is not available!")
        print("Options:")
        print("1. Start server: cd python/server && python3 data_server.py")
        print("2. Use file-only mode")
        
        choice = input("\nUse file-only mode? (y/n): ").lower().strip()
        if choice == 'y':
            calibrator.use_api = False
            calibrator.fallback_to_file = True
            print("‚úÖ Using file-only mode")
        else:
            print("Please start the server first!")
            return
    
    # –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    await calibrator.interactive_calibration()

async def calibrate_single_motor():
    """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –º–æ—Ç–æ—Ä–∞"""
    
    print("üéØ Single Motor Calibration")
    print("=" * 30)
    
    calibrator = EnhancedMotorCalibrator()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    api_available = await calibrator.test_api_connection()
    if not api_available:
        calibrator.use_api = False
        calibrator.fallback_to_file = True
        print("Using file-only mode")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await calibrator.connect():
        return
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await calibrator.load_calibration_data()
        
        # –í—ã–±–æ—Ä –º–æ—Ç–æ—Ä–∞
        calibrator.show_calibration_status()
        motor = int(input("Enter motor number (0-2): "))
        speed = int(input("Enter speed (0-255, default 150): ") or "150")
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞
        success = await calibrator.calibrate_motor(motor, speed)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await calibrator.save_calibration_data()
            print("‚úÖ Calibration completed!")
        
    finally:
        await calibrator.disconnect()

async def calibrate_all_motors():
    """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤"""
    
    print("üîÑ All Motors Calibration")
    print("=" * 30)
    
    calibrator = EnhancedMotorCalibrator()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    api_available = await calibrator.test_api_connection()
    if not api_available:
        calibrator.use_api = False
        calibrator.fallback_to_file = True
        print("Using file-only mode")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await calibrator.connect():
        return
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await calibrator.load_calibration_data()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        speed = int(input("Enter calibration speed (0-255, default 150): ") or "150")
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤
        success = await calibrator.calibrate_all_motors(speed)
        
        if success:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            await calibrator.save_calibration_data()
            print("üéâ All motors calibrated successfully!")
        
    finally:
        await calibrator.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    print("ü§ñ ESP32 Robot Arm Calibration Menu")
    print("=" * 40)
    print("1. Quick calibration (interactive)")
    print("2. Calibrate single motor")
    print("3. Calibrate all motors")
    print("4. Test API connection")
    print("5. Exit")
    
    choice = input("\nChoose option (1-5): ").strip()
    
    if choice == "1":
        await quick_calibration()
    elif choice == "2":
        await calibrate_single_motor()
    elif choice == "3":
        await calibrate_all_motors()
    elif choice == "4":
        calibrator = EnhancedMotorCalibrator()
        await calibrator.test_api_connection()
    elif choice == "5":
        print("Goodbye!")
    else:
        print("Invalid choice!")

if __name__ == "__main__":
    asyncio.run(main())
